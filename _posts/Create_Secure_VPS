---
title: "How to Create and Secure a VPS on DigitalOcean"
description: "Learn to quickly set up a secure VPS on DigitalOcean, install Docker, Docker Compose, and Nginx Proxy Manager with best security practices."
---

A home lab is a fantastic way to experiment, learn new skills, and host various projects. However, certain applications, such as web servers, may expose your home network to unnecessary security risks. This is where Virtual Private Servers (VPS) become invaluable. DigitalOcean offers an easy, secure, and affordable way to host your projects online.

In this guide, you'll learn how to quickly set up a secure VPS on DigitalOcean, install Docker, Docker Compose, and Nginx Proxy Manager to simplify managing your reverse proxies and SSL certificates.

## Why Choose a VPS for Your Home Lab Projects?

A VPS allows you to isolate your public-facing applications from your home network. It's scalable, reliable, and significantly reduces potential security vulnerabilities at home.

Sign up on DigitalOcean using our special affiliate link and receive **$200 in free credits for 60 days**. Plus, your signup supports our website!

> [Sign up and claim your $200 DigitalOcean credit now!](YOUR_AFFILIATE_LINK_HERE)

## Step 1: Creating a DigitalOcean Account and VPS (Droplet)

1. **Create an account** using the provided affiliate link.
2. After logging in, click **"Create" â†’ "Droplet"**.
3. Select your desired Linux distribution (we recommend Ubuntu 22.04 LTS).
4. Choose the droplet size according to your needs.
5. Choose your data center location closest to your primary audience.

## Step 2: Securing Your VPS with SSH Keys

To enhance security, always use SSH keys instead of passwords.

### Generating SSH Keys

Run this command in your terminal:

```bash
ssh-keygen -t ed25519 -C "your_email@example.com"
```

Copy the public key to DigitalOcean during droplet creation:

```bash
cat ~/.ssh/id_ed25519.pub
```

Paste this public key into the SSH key field on DigitalOcean.

## Step 3: Initial Server Setup

Log into your new VPS:

```bash
ssh root@your_server_ip
```

Update your server:

```bash
apt update && apt upgrade -y
```

Create a non-root user:

```bash
adduser yourusername
usermod -aG sudo yourusername
```

Set up SSH key access for this new user:

```bash
rsync --archive --chown=yourusername:yourusername ~/.ssh /home/yourusername
```

Disable root login by editing the SSH configuration:

```bash
sudo nano /etc/ssh/sshd_config
```

Change `PermitRootLogin` to `no` and restart SSH:

```bash
sudo systemctl restart ssh
```

## Step 4: Install Docker and Docker Compose

Install Docker using the official convenience script:

```bash
curl -fsSL https://get.docker.com | sh
```

Add your user to the Docker group:

```bash
sudo usermod -aG docker yourusername
```

Install Docker Compose:

```bash
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```

## Step 5: Deploy Nginx Proxy Manager with Docker Compose

Create a directory and Docker Compose file:

```bash
mkdir ~/nginx-proxy-manager && cd ~/nginx-proxy-manager
nano docker-compose.yml
```

Paste the following configuration:

```yaml
version: '3'
services:
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
```

Launch the container:

```bash
docker-compose up -d
```

Access Nginx Proxy Manager by navigating to `http://your_server_ip:81`. Default credentials:

- **Email:** `admin@example.com`
- **Password:** `changeme`

## Best Practices to Keep Your VPS Secure

- Regularly update your system and software.
- Use SSH keys and disable password authentication.
- Implement firewall rules (`ufw` recommended).
- Regularly backup important data.
- Monitor your VPS for unusual activities.

## Conclusion

You've successfully set up a secure VPS with Docker, Docker Compose, and Nginx Proxy Manager. Now you can safely expose applications without risking your home network. Don't forget to claim your $200 credit by [signing up via our affiliate link](YOUR_AFFILIATE_LINK_HERE).

Happy Hosting!

